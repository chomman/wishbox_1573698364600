/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5dcb97a2f1ef4518a5382d3c
*
* You will get 10% discount for each one of your friends
* 
*/
// Dependencies
import React, { Component } from "react";
import { Link } from "react-router-dom";
import Utils from "../utils/utils";

// Redux
import PropTypes from "prop-types";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

// Material UI
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import { DateTimePicker } from "material-ui-pickers";
import Select from "@material-ui/core/Select";
import MenuItem from "@material-ui/core/MenuItem";
import InputLabel from "@material-ui/core/InputLabel";
import FormControl from "@material-ui/core/FormControl";
import Switch from "@material-ui/core/Switch";
import FormControlLabel from "@material-ui/core/FormControlLabel";
import Chip from "@material-ui/core/Chip";
import Input from "@material-ui/core/Input";

// Custom Actions


// START IMPORT ACTIONS
import ItemActions from "../redux/actions/ItemActions";
import CategoryActions from "../redux/actions/CategoryActions";
import TagActions from "../redux/actions/TagActions";

// END IMPORT ACTIONS

/** APIs

* actionsItem.create
*	@description CRUD ACTION create
*
* actionsItem.get
*	@description CRUD ACTION get
*	@param ObjectId id - Id resource
*
* actionsUser.list
*	@description CRUD ACTION list
*
* actionsCategory.list
*	@description CRUD ACTION list
*
* actionsTag.list
*	@description CRUD ACTION list
*
* actionsItem.update
*	@description CRUD ACTION update
*	@param ObjectId id - Id
*

**/

class ItemEdit extends Component {
  // Init item
  constructor(props) {
    super(props);
    this.state = {
      item: {}
    };
  }

  // Load data on start
  componentDidMount() {
    if (this.props.match.params.id !== "new") {
      this.props.actionsItem.loadItem(this.props.match.params.id);
    }
    
    this.props.actionsCategory.loadCategoryList();
    this.props.actionsUser.loadUserList();
    this.props.actionsTag.loadTagList();
  }

  // Insert props item in state
  componentWillReceiveProps(props) {
    this.setState(...this.state, {
      item: props.item
    });
  }

  // Save data
  save(event) {
    event.preventDefault();
    if (this.state.item._id) {
      this.props.actionsItem.saveItem(this.state.item).then(data => {
        this.props.history.push("/items/");
      });
    } else {
      this.props.actionsItem.createItem(this.state.item).then(data => {
        this.props.history.push("/items/");
      });
    }
  }

  // Show content
  render() {
    return (
      <div>
        <h1>Item Edit</h1>
        <form className="myForm" onSubmit={this.save.bind(this)}>

          <DateTimePicker
            id="createdAt"
            label="CreatedAt"
            className="mt-20 mb-20"
            ampm={false}
            value={
              this.state.item.createdAt
                ? new Date(this.state.item.createdAt)
                : null
            }
            onChange={Utils.handleChangeDate.bind(this, "item", "createdAt")}
            fullWidth
            autoOk
            disableFuture
          />
          
          
          <TextField
            id="desc"
            label="Desc"
            value={this.state.item.desc || ""}
            onChange={Utils.handleChange.bind(this, "item")}
            margin="normal"
            fullWidth
          />
          
          <FormControlLabel
            control={
              <Switch
                id="isPublic"
                checked={this.state.item.isPublic || false}
                onChange={Utils.handleChangeCheck.bind(this, "item", "isPublic")}
                color="primary"
              />
            }
            label="isPublic"
            className="mt-20"
          />
          
          
          <TextField
            id="name"
            label="Name"
            value={this.state.item.name || ""}
            onChange={Utils.handleChange.bind(this, "item")}
            margin="normal"
            fullWidth
            required
            {...(!this.state.item.name && this.state.item.name === ""
              ? { error: true }
              : {})}
          />
          
          {/* RELATIONS */}

          <h2 className="mb-20">Relations</h2>
          
          {/* Relation 1:m category with Category */}
          
          <FormControl fullWidth className="mb-20">
            <InputLabel shrink htmlFor="category">
              Category
            </InputLabel>
            <Select
              value={this.state.item.category || ""}
              onChange={Utils.handleChangeSelect.bind(this, "item")}
              inputProps={{
                id: "category",
                name: "category"
              }}
              fullWidth
            >
              <MenuItem value="">
                <em>None</em>
              </MenuItem>
              {this.props.listCategory && this.props.listCategory.map(row => (
                <MenuItem value={row._id} key={row._id}>
                  {row._id}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          
          {/* Relation 1:m createdBy with User */}
          
          <FormControl fullWidth className="mb-20">
            <InputLabel shrink htmlFor="createdBy">
              CreatedBy
            </InputLabel>
            <Select
              value={this.state.item.createdBy || ""}
              onChange={Utils.handleChangeSelect.bind(this, "item")}
              inputProps={{
                id: "createdBy",
                name: "createdBy"
              }}
              fullWidth
            >
              <MenuItem value="">
                <em>None</em>
              </MenuItem>
              {this.props.listUser && this.props.listUser.map(row => (
                <MenuItem value={row._id} key={row._id}>
                  {row._id}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          
          {/* Relation m:m tags with Tag */}
          
          <FormControl fullWidth className="mb-20">
            <InputLabel htmlFor="tags">Tags</InputLabel>
            <Select
              multiple
              value={this.state.item.tags || []}
              onChange={Utils.handleChangeSelect.bind(this, "item")}
              input={<Input id="tags" name="tags" />}
              renderValue={selected => (
                <div>
                  {selected.map(value => (
                    <Chip key={value} label={value} />
                  ))}
                </div>
              )}
            >
              {this.props.listTag && this.props.listTag.map(item => (
                <MenuItem
                  key={item._id}
                  value={item._id}
                  style={{
                    fontWeight:
                      this.state.item.tags &&
                      this.state.item.tags.indexOf(item._id) === -1
                        ? "regular"
                        : "bold"
                  }}
                >
                  {item._id}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          {/* Footer */}
          <div className="footer-card">
            <Link to="/items/">Back to list</Link>

            <Button type="submit" variant="contained" color="primary">
              Save
            </Button>
          </div>
        </form>
      </div>
    );
  }
}

// Store actions
const mapDispatchToProps = function(dispatch) {
  return { 
    actionsItem: bindActionCreators(ItemActions, dispatch),
    actionsCategory: bindActionCreators(CategoryActions, dispatch),
    actionsTag: bindActionCreators(TagActions, dispatch),
  };
};

// Validate types
ItemEdit.propTypes = { 
  actionsItem: PropTypes.object.isRequired,
  actionsCategory: PropTypes.object.isRequired,
  actionsTag: PropTypes.object.isRequired,
};

// Get props from state
function mapStateToProps(state, ownProps) {
  return {
    item: state.ItemEditReducer.item,
    listCategory: state.ItemEditReducer.listCategory,
    listUser: state.ItemEditReducer.listUser,
    listTag: state.ItemEditReducer.listTag
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(ItemEdit);
