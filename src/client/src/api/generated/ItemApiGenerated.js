/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5dcb97a2f1ef4518a5382d3c
*
* You will get 10% discount for each one of your friends
* 
*/
/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE APIS IN ItemApiGenerated.js PLEASE EDIT ../ItemApi.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
 
// Dependencies
import axios from "axios";
import { properties } from "../../config/properties";

class ItemApiGenerated {

  static contextUrl = properties.endpoint + "/item";

  // CRUD METHODS

  /**
  * ItemService.create
  *   @description CRUD ACTION create
  *
  */
  static createItem(item) {
    return axios.post(ItemApiGenerated.contextUrl, item )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * ItemService.delete
  *   @description CRUD ACTION delete
  *   @param ObjectId id Id
  *
  */
  static deleteItem(id) {
    return axios.delete(ItemApiGenerated.contextUrl + "/" + id)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * ItemService.findBycategory
  *   @description CRUD ACTION findBycategory
  *   @param Objectid key Id della risorsa category da cercare
  *
  */
  static findBycategory(id) {
    return axios.get(ItemApiGenerated.contextUrl + "/findBycategory/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * ItemService.findBycreatedBy
  *   @description CRUD ACTION findBycreatedBy
  *   @param Objectid key Id della risorsa createdBy da cercare
  *
  */
  static findBycreatedBy(id) {
    return axios.get(ItemApiGenerated.contextUrl + "/findBycreatedBy/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * ItemService.findBytags
  *   @description CRUD ACTION findBytags
  *   @param Objectid key Id della risorsa tags da cercare
  *
  */
  static findBytags(id) {
    return axios.get(ItemApiGenerated.contextUrl + "/findBytags/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * ItemService.get
  *   @description CRUD ACTION get
  *   @param ObjectId id Id resource
  *
  */
  static getOneItem(id) {
    return axios.get(ItemApiGenerated.contextUrl + "/" + id)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * ItemService.list
  *   @description CRUD ACTION list
  *
  */
  static getItemList() {
    return axios.get(ItemApiGenerated.contextUrl)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * ItemService.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id
  *
  */
  static saveItem(item) {
    return axios.post(ItemApiGenerated.contextUrl + "/" + item._id, item )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }



    // Custom APIs
}

export default ItemApiGenerated;
